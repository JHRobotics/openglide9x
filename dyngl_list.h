DGL_ITEM(void, APIENTRY, glAlphaFunc, (GLenum func,GLclampf ref))
DGL_ITEM(void, APIENTRY, glBegin, (GLenum mode))
DGL_ITEM(void, APIENTRY, glBindTexture, (GLenum target,GLuint texture))
DGL_ITEM(void, APIENTRY, glBlendFunc, (GLenum sfactor,GLenum dfactor))
DGL_ITEM(void, APIENTRY, glClear, (GLbitfield mask))
DGL_ITEM(void, APIENTRY, glClearColor, (GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha))
DGL_ITEM(void, APIENTRY, glClearDepth, (GLclampd depth))
DGL_ITEM(void, APIENTRY, glColor3f, (GLfloat red,GLfloat green,GLfloat blue))
DGL_ITEM(void, APIENTRY, glColor3fv, (const GLfloat *v))
DGL_ITEM(void, APIENTRY, glColor4fv, (const GLfloat *v))
DGL_ITEM(void, APIENTRY, glColorMask, (GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha))
DGL_ITEM(void, APIENTRY, glColorPointer, (GLint size,GLenum type,GLsizei stride,const GLvoid *pointer))
DGL_ITEM(void, APIENTRY, glCullFace, (GLenum mode))
DGL_ITEM(void, APIENTRY, glDeleteTextures, (GLsizei n,const GLuint *textures))
DGL_ITEM(void, APIENTRY, glDepthFunc, (GLenum func))
DGL_ITEM(void, APIENTRY, glDepthMask, (GLboolean flag))
DGL_ITEM(void, APIENTRY, glDisable, (GLenum cap))
DGL_ITEM(void, APIENTRY, glDrawArrays, (GLenum mode,GLint first,GLsizei count))
DGL_ITEM(void, APIENTRY, glDrawBuffer, (GLenum mode))
DGL_ITEM(void, APIENTRY, glEnable, (GLenum cap))
DGL_ITEM(void, APIENTRY, glEnableClientState, (GLenum array))
DGL_ITEM(void, APIENTRY, glEnd, (void))
DGL_ITEM(void, APIENTRY, glFinish, (void))
DGL_ITEM(void, APIENTRY, glFlush, (void))
DGL_ITEM(void, APIENTRY, glFogf, (GLenum pname,GLfloat param))
DGL_ITEM(void, APIENTRY, glFogfv, (GLenum pname,const GLfloat *params))
DGL_ITEM(void, APIENTRY, glFogi, (GLenum pname,GLint param))
DGL_ITEM(void, APIENTRY, glFrontFace, (GLenum mode))
DGL_ITEM(void, APIENTRY, glGenTextures, (GLsizei n,GLuint *textures))
DGL_ITEM(GLenum, APIENTRY, glGetError, (void))
DGL_ITEM(void, APIENTRY, glGetIntegerv, (GLenum pname,GLint *params))
DGL_ITEM(const GLubyte *, APIENTRY, glGetString, (GLenum name))
DGL_ITEM(void, APIENTRY, glLoadIdentity, (void))
DGL_ITEM(void, APIENTRY, glMatrixMode, (GLenum mode))
DGL_ITEM(void, APIENTRY, glOrtho, (GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar))
DGL_ITEM(void, APIENTRY, glPixelStorei, (GLenum pname,GLint param))
DGL_ITEM(void, APIENTRY, glPolygonOffset, (GLfloat factor,GLfloat units))
DGL_ITEM(void, APIENTRY, glPopAttrib, (void))
DGL_ITEM(void, APIENTRY, glPushAttrib, (GLbitfield mask))
DGL_ITEM(void, APIENTRY, glReadBuffer, (GLenum mode))
DGL_ITEM(void, APIENTRY, glReadPixels, (GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid *pixels))
DGL_ITEM(void, APIENTRY, glScissor, (GLint x,GLint y,GLsizei width,GLsizei height))
DGL_ITEM(void, APIENTRY, glShadeModel, (GLenum mode))
DGL_ITEM(void, APIENTRY, glTexCoord2f, (GLfloat s,GLfloat t))
DGL_ITEM(void, APIENTRY, glTexCoord4fv, (const GLfloat *v))
DGL_ITEM(void, APIENTRY, glTexCoordPointer, (GLint size,GLenum type,GLsizei stride,const GLvoid *pointer))
DGL_ITEM(void, APIENTRY, glTexEnvf, (GLenum target,GLenum pname,GLfloat param))
DGL_ITEM(void, APIENTRY, glTexEnvi, (GLenum target,GLenum pname,GLint param))
DGL_ITEM(void, APIENTRY, glTexImage2D, (GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid *pixels))
DGL_ITEM(void, APIENTRY, glTexParameteri, (GLenum target,GLenum pname,GLint param))
DGL_ITEM(void, APIENTRY, glTexSubImage2D, (GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid *pixels))
DGL_ITEM(void, APIENTRY, glVertex2f, (GLfloat x,GLfloat y))
DGL_ITEM(void, APIENTRY, glVertex3fv, (const GLfloat *v))
DGL_ITEM(void, APIENTRY, glVertexPointer, (GLint size,GLenum type,GLsizei stride,const GLvoid *pointer))
DGL_ITEM(void, APIENTRY, glViewport, (GLint x,GLint y,GLsizei width,GLsizei height))
DGL_ITEM(BOOL, WINAPI, wglCopyContext, (HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask))
DGL_ITEM(HGLRC, WINAPI, wglCreateContext, (HDC hDc))
DGL_ITEM(BOOL, WINAPI, wglDeleteContext, (HGLRC oldContext))
DGL_ITEM(PROC, WINAPI, wglGetProcAddress, (LPCSTR lpszProc))
DGL_ITEM(BOOL, WINAPI, wglMakeCurrent, (HDC hDc, HGLRC newContext))
